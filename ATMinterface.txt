import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Transaction {
    private String type;
    private double amount;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
    }

    public String getType() {
        return type;
    }

    public double getAmount() {
        return amount;
    }
}

class BankAccount {
    private String userId;
    private String userPin;
    private double balance;
    private List<Transaction> transactionHistory;

    public BankAccount(String userId, String userPin, double initialBalance) {
        this.userId = userId;
        this.userPin = userPin;
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>();
    }

    public String getUserId() {
        return userId;
    }

    public String getUserPin() {
        return userPin;
    }

    public double getBalance() {
        return balance;
    }

    public List<Transaction> getTransactionHistory() {
        return transactionHistory;
    }

    public void withdraw(double amount) {
        if (amount <= 0) {
            System.out.println("Invalid amount. Please enter a positive value.");
        } else if (amount > balance) {
            System.out.println("Insufficient balance. Withdrawal failed.");
        } else {
            balance -= amount;
            transactionHistory.add(new Transaction("Withdraw", amount));
            System.out.println("Withdrawal successful. Current balance: $" + balance);
        }
    }

    public void deposit(double amount) {
        if (amount <= 0) {
            System.out.println("Invalid amount. Please enter a positive value.");
        } else {
            balance += amount;
            transactionHistory.add(new Transaction("Deposit", amount));
            System.out.println("Deposit successful. Current balance: $" + balance);
        }
    }

    public void transfer(String recipientUserId, double amount) {
        if (amount <= 0) {
            System.out.println("Invalid amount. Please enter a positive value.");
        } else if (amount > balance) {
            System.out.println("Insufficient balance. Transfer failed.");
        } else {
            balance -= amount;
            transactionHistory.add(new Transaction("Transfer to " + recipientUserId, amount));
            System.out.println("Transfer successful. Current balance: $" + balance);
        }
    }
}

class ATM {
    private static List<BankAccount> bankAccounts = new ArrayList<>();

    public static void main(String[] args) {
        initializeBankAccounts();

        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("Welcome to the ATM!");

            boolean isLoggedIn = false;
            BankAccount currentAccount = null;

            while (!isLoggedIn) {
                System.out.println("Enter your user ID:");
                String userId = scanner.nextLine();
                System.out.println("Enter your user PIN:");
                String userPin = scanner.nextLine();

                currentAccount = login(userId, userPin);

                if (currentAccount != null) {
                    isLoggedIn = true;
                    System.out.println("Login successful. Welcome, " + currentAccount.getUserId() + "!");
                } else {
                    System.out.println("Invalid user ID or PIN. Please try again.");
                }
            }

            boolean isRunning = true;

            while (isRunning) {
                System.out.println("\nPlease select an option:");
                System.out.println("1. View transaction history");
                System.out.println("2. Withdraw");
                System.out.println("3. Deposit");
                System.out.println("4. Transfer");
                System.out.println("5. Quit");

                int option = Integer.parseInt(scanner.nextLine());

                switch (option) {
                    case 1:
                        viewTransactionHistory(currentAccount);
                        break;
                    case 2:
                        System.out.println("Enter the amount to withdraw:");
                        double withdrawAmount = Double.parseDouble(scanner.nextLine());
                        currentAccount.withdraw(withdrawAmount);
                        break;
                    case 3:
                        System.out.println("Enter the amount to deposit:");
                        double depositAmount = Double.parseDouble(scanner.nextLine());
                        currentAccount.deposit(depositAmount);
                        break;
                    case 4:
                        System.out.println("Enter the recipient's user ID:");
                        String recipientUserId = scanner.nextLine();
                        System.out.println("Enter the amount to transfer:");
                        double transferAmount = Double.parseDouble(scanner.nextLine());
                        currentAccount.transfer(recipientUserId, transferAmount);
                        break;
                    case 5:
                        isRunning = false;
                        System.out.println("Thank you for using the ATM. Goodbye!");
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                        break;
                }
            }
        } catch (NumberFormatException e) {

            e.printStackTrace();
        }
    }

    private static void initializeBankAccounts() {
        bankAccounts.add(new BankAccount("user1", "pin1", 1000));
        bankAccounts.add(new BankAccount("user2", "pin2", 2000));
        bankAccounts.add(new BankAccount("user3", "pin3", 3000));
    }

    private static BankAccount login(String userId, String userPin) {
        for (BankAccount account : bankAccounts) {
            if (account.getUserId().equals(userId) && account.getUserPin().equals(userPin)) {
                return account;
            }
        }
        return null;
    }

    private static void viewTransactionHistory(BankAccount account) {
        List<Transaction> transactionHistory = account.getTransactionHistory();

        if (transactionHistory.isEmpty()) {
            System.out.println("No transactions found.");
        } else {
            System.out.println("Transaction History:");

            for (Transaction transaction : transactionHistory) {
                System.out.println(transaction.getType() + " - $" + transaction.getAmount());
            }
        }
    }
}
